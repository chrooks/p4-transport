#!/usr/bin/python3
#
# CS3700, Fall 2021
# TCP Project Starter Code
#

import datetime
import json
import sys
import socket
import time
import random as random

from base64 import b64encode


MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 0.5
SEQUENCE = 0 # random.randrange(2**32 - 1)
SENT_PACKETS = []

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

time.sleep(.5)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 3700send: " + string + "\n")

def send_packet(msg):
  packet = json.dumps(msg)
  if sock.sendto(packet.encode(), dest) < len(packet):
      log("[error] unable to fully send packet")
      return False
  else:
    log("[send data] " + str(msg['sequence']) + " (" + str(msg['data length']) + ")")
    return True
      
def read_buffer():
  return sys.stdin.buffer.read(DATA_SIZE)

def send_next_packet():
  global SEQUENCE
  success = False
  log(f"=========== NEXT PACKET SEQ #: {SEQUENCE} ===========")

  data = b64encode(read_buffer()).decode()
  log(f"Read in {len(data) - 336} B of data")
  if (len(data) > 0):
    # print(str(b64encode(data)))

    # Craft message
    msg = {"sequence": SEQUENCE, "data": data, "ack": False, "eof": False, "resend": False, "data length": len(data) - 336}
    SENT_PACKETS.append(msg)
    success = send_packet(msg)
  else:
    log("There is no more data to be read")
  if success:
    SEQUENCE = SEQUENCE + len(data) - 336
  
  return success

def resend_last_packet():
  prev_packet = SENT_PACKETS[-1]
  prev_packet['resend'] = True

  log(f"resending previous packet seq #: {prev_packet['sequence']}")
  send_packet(prev_packet)

# Send first packet
send_next_packet()

# Now read in data, send packets
while True:
  log("WAITING FOR RECEIVER RESPONSE")

  try:
    result = sock.recvfrom(MSG_SIZE)
  except socket.timeout:
    result = None
  
  if result:
    log("successfully received something from receiver")
    (data, addr) = result
    try:
      decoded = json.loads(data.decode())
      log("[recv pkt] " + str(decoded))
      log("[recv ack] " + str(decoded['ack']))

      # log(f"CURRENT SEQ #: {SEQUENCE}")

      # If there is an ack, send next packet
      if decoded['ack'] == SEQUENCE:
        # Try to send next packet; break if no more data
        if (not send_next_packet()):
          log("Breaking listening loop...")  
          break

    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timed out before receiver response, something must've dropped")
    resend_last_packet()
    # sys.exit(-1)


log("Sending eof message...")  
sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}).encode(), dest)
sys.exit(0)